<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bdx.rainbow.mapper.basic.mysql.SelfLawMapper" >
   <resultMap id="BaseResultMap" type="com.bdx.rainbow.entity.basic.mysql.SelfBasicLaw" >
    <result column="LAW_ID" property="lawId" jdbcType="INTEGER" />
    <result column="AGENCIES" property="agencies" jdbcType="VARCHAR" />
    <result column="BTTYPE" property="bttype" jdbcType="INTEGER" />
    <result column="BUSINESSTYPE" property="businesstype" jdbcType="VARCHAR" />
    <result column="FILENUMBER" property="filenumber" jdbcType="VARCHAR" />
    <result column="ISDEL" property="isdel" jdbcType="VARCHAR" />
    <result column="KEYWORDS" property="keywords" jdbcType="VARCHAR" />
    <result column="OVERVIEW" property="overview" jdbcType="VARCHAR" />
    <result column="PARENTID" property="parentid" jdbcType="INTEGER" />
    <result column="PUBLISH_TIME" property="publishTime" jdbcType="DATE" />
    <result column="PUBLISHEDTYPE" property="publishedtype" jdbcType="VARCHAR" />
    <result column="RANGES" property="ranges" jdbcType="VARCHAR" />
    <result column="ROOTID" property="rootid" jdbcType="VARCHAR" />
    <result column="SERIALNO" property="serialno" jdbcType="INTEGER" />
    <result column="TITLE" property="title" jdbcType="VARCHAR" />
    <result column="Z_INDEX" property="zIndex" jdbcType="INTEGER" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="CREATER" property="creater" jdbcType="VARCHAR" />
    <result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="UPDATER" property="updater" jdbcType="VARCHAR" />
    <result column="BACKUPSTRING" property="backupString" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.bdx.rainbow.entity.basic.mysql.SelfBasicLaw" extends="BaseResultMap" >
    <result column="CONTENT" property="content" jdbcType="LONGVARCHAR" />
    <result column="CONTENTTXT" property="contenttxt" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <trim prefix="where" prefixOverrides="and | or">  
    	<if test="lawId != null" >
		 and LAW_ID = #{ lawId } 
	    </if>
	    <if test="bttype != null" >
		 and BTTYPE = #{ bttype } 
	    </if>
	    <if test="businesstype != null and businesstype != '' " >
		 and BUSINESSTYPE = #{ businesstype } 
	    </if>
	    <if test="publishedtype != null and publishedtype != '' " >
		 and PUBLISHEDTYPE = #{ publishedtype } 
	    </if>
	    <if test="isdel != null and isdel != '' " >
		 and ISDEL = #{ isdel } 
	    </if>
	    <if test="title != null and title != '' " >
		 and TITLE like #{ title } 
	    </if>
	    <if test="keywords != null and keywords != '' " >
		 and KEYWORDS like #{ keywords } 
	    </if>
	    <if test="agencies != null and agencies != '' " >
		 and AGENCIES like #{ agencies } 
	    </if>
	    <if test="contenttxt != null and contenttxt != '' " >
		 and CONTENTTXT like #{ contenttxt } 
	    </if>
	    <if test="publishedtype != null and publishedtype != '' " >
		 and PUBLISHEDTYPE = #{ publishedtype } 
	    </if>
	    <if test="businesstype != null and businesstype != '' " >
		 and bttype = #{ businesstype } 
	    </if>
	    <if test="publishStartTime != null" >
	    	<![CDATA[ and PUBLISH_TIME >= #{ publishStartTime } ]]>
	    </if>
	    <if test="publishEndTime != null" >
	    	<![CDATA[ and PUBLISH_TIME <= #{ publishEndTime } ]]>
	    </if>
	    <if test="parentid != null and parentid != '' " >
		 and PARENTID = #{ parentid } 
	    </if>
	    <if test="rootid != null and rootid != '' " >
		 and ROOTID = #{ rootid } 
	    </if>
	    <if test="zIndex != null and zIndex != '' " >
		 and Z_INDEX = #{ zIndex } 
	    </if>
    </trim>
  </sql>
  <sql id="Base_Column_List" >
    LAW_ID, AGENCIES, BTTYPE, BUSINESSTYPE, FILENUMBER, ISDEL, KEYWORDS, OVERVIEW, PARENTID, 
    PUBLISH_TIME, PUBLISHEDTYPE, RANGES, ROOTID, SERIALNO, TITLE, Z_INDEX, CREATE_TIME, 
    CREATER, UPDATE_TIME, UPDATER
  </sql>
  <sql id="Blob_Column_List" >
    CONTENT, CONTENTTXT
  </sql>
   <select id="countLaw" parameterType="Map" resultType="java.lang.Integer" >
    select count(*) from t_basic_law_db
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <!-- BACKUPSTRING showPath -->
  <select id="getLawList" resultMap="BaseResultMap" parameterType="Map" >
    select
    <if test="distinct" >
      distinct
    </if>
	    <include refid="Base_Column_List" />
	    ,
   <![CDATA[ CONCAT('/lawDb/show?rootId=',rootId,'&z_index=1') ]]> as BACKUPSTRING from t_basic_law_db 
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitClauseStart != null and limitClauseStart >= 0" >
       limit #{limitClauseStart,jdbcType=INTEGER}, #{limitClauseCount,jdbcType=INTEGER}
    </if>
  </select>
  
  <select id="getNodeList" resultMap="ResultMapWithBLOBs" parameterType="com.bdx.rainbow.entity.basic.mysql.TBasicLawDbExample" >
    select 
	    <include refid="Base_Column_List" />
	    ,
	    <include refid="Blob_Column_List" />
	    ,
	    <if test="childIndex != null and childIndex != ''" >
	    	(select count(LAW_ID) from t_basic_law_db where isDel=0 and parentId=law.LAW_ID and z_index= #{ childIndex } ) as BACKUPSTRING
	    </if>
	    <if test="childIndex == null" >
	    	 0 as BACKUPSTRING
	    </if>
	    
      from t_basic_law_db law
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitClauseStart != null and limitClauseStart >= 0" >
       limit #{limitClauseStart,jdbcType=INTEGER}, #{limitClauseCount,jdbcType=INTEGER}
    </if>
  </select>
  
  <select id="getTitles" resultType="java.lang.String" parameterType="Map" >
    select group_concat(d.TITLE) from t_basic_law_db d where 
	   d.ROOTID in
	   <foreach collection="list" item="rootid" index="index"
            open="(" close=")" separator=",">
            #{ rootid }
        </foreach>
       order by d.ROOTID 
  </select>
  
</mapper>